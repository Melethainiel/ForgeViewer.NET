@page "/Viewer"
@using ForgeViewer.NET.Models
@using System.Net.Http.Json
@using ForgeViewer.NET.Ui
@using ForgeViewer.NET.Viewing
@using ForgeViewer.Sample.Data
@using System.Globalization
@inject IServiceProvider ServiceProvider
@inject IHttpClientFactory Factory
<h3>Viewer</h3>

<div class="container-fluid d-flex h-100">
    <div class="flex-fill">
        <div id="demo" style="position: relative; height: calc(100% - 120px); width: calc(100% - 0px);">
        </div>
        <p>Current selection : @_currentSelection</p>
        <button class="btn btn-primary" @onclick="OnShutdown">Shutdown</button>
    </div>
</div>

@code {

    private GuiViewer3d GuiViewer3d { get; set; }
    private Viewing Viewing { get; set; }
    private string _currentSelection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Viewing = Viewing.Create(ServiceProvider);
            var opt = GetOptions();
            await Viewing.Initializer(opt, OnInit);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnInit()
    {
        GuiViewer3d = GuiViewer3d.Create(ServiceProvider);
        await GuiViewer3d.Initializer("demo");
    // await GuiViewer3d.AddEventListener(ViewerEvent.ToolbarCreatedEvent, OnViewerInit);
        await GuiViewer3d.AddEventListener(ViewerEvent.ExtensionLoadedEvent, OnExtLoaded);
        await GuiViewer3d.AddEventListener(ViewerEvent.SelectionChangedEvent, OnSelectionChanged);

        await GuiViewer3d.Start();

        var urn = "urn:dXJuOmFkc2sub2JqZWN0czpvcy5vYmplY3Q6cGJpLXZpZXdlci9NYXF1ZXR0ZSUyMEdPRSUyMHYwNGQuaWZj";
        await Document.Load(ServiceProvider, urn, OnSuccess);
    }

    private async Task OnExtLoaded(object? arg)
    {
        var ext = new[] {"Autodesk.PropertiesManager", "Autodesk.Explode"};
        if (arg is not ExtensionResponse extensionResponse || !ext.Contains(extensionResponse.ExtensionId))
            return;


        await GuiViewer3d.GetExtensions(extensionResponse.ExtensionId, Callback);
    }

    private async Task Callback(Extension extension)
    {
        await extension.Unload();
    }

    private async Task OnSuccess(Document document)
    {
        var bubbleNode = await document.GetRoot();
        var getDefaultGeometry = await bubbleNode.GetDefaultGeometry();
        var model = await GuiViewer3d.LoadDocumentNode(document, getDefaultGeometry, new { keepCurrentModels = true });
    }

    private async Task OnSelectionChanged(object? arg)
    {
        if (arg is not Selection selection || selection.DbIdArray is null)
            return;

        _currentSelection = selection.DbIdArray.Select(i => i.ToString(CultureInfo.InvariantCulture)).Aggregate((a, b) => $"{a},{b}");

        foreach (var d in selection.DbIdArray)
        {
            await GetIfcGuid(d);
        }
        StateHasChanged();
    }

    private async Task GetIfcGuid(double selectionId)
    {
        await GuiViewer3d.GetProperties(selectionId, async result =>
        {
            var type = result.Properties?.SingleOrDefault(p => p.AttributeName == "LcOaNode:LcOaSceneBaseClassUserName");
            if (type is not {})
                throw new ArgumentException("not found", nameof(selectionId));

            if (result.Properties?.SingleOrDefault(p => p.AttributeName == "LcIFCProperty:IFCString" && p.DisplayCategory == "IFC" && p.DisplayName == "GLOBALID") is not {} prop)
            {
                var parentId = result.Properties?.SingleOrDefault(p => p.AttributeName == "parent");
                if (parentId is not {})
                    return;
                await GetIfcGuid(double.Parse(parentId.DisplayValue.ToString()));
            }
            else
            {
                _currentSelection = prop.DisplayValue.ToString();
            }
        });
    }

    //Only for sample, should use ExtensionLoadedEvent
    private async Task OnViewerInit(object? obj)
    {
        var modelTools = await GuiViewer3d.ToolBar.GetControl<GroupControl>("modelTools");
        await modelTools.RemoveControl("toolbar-explodeTool");

        var settingsTools = await GuiViewer3d.ToolBar.GetControl<GroupControl>("settingsTools");
        await settingsTools.RemoveControl("toolbar-propertiesTool");
    }

    private Options GetOptions()
    {
        var options = new Options
        {
            GetAccessToken = async () =>
            {
                var client = Factory.CreateClient("auth");
                var resp = await client.GetAsync("https://ifcdb.azurewebsites.net/Forge");
                var respAsObj = await resp.Content.ReadFromJsonAsync<Auth>();
                var token = respAsObj?.AccessToken ?? throw new Exception("Can't get access token");
                return token;
            }
        };
        return options;
    }
    
    private async Task OnShutdown()
    {
        await GuiViewer3d.Uninitialize();
        await Viewing.Shutdown();
    }

}